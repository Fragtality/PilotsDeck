<UserControl x:Class="PilotsDeck.UI.ActionDesignerUI.Views.ViewCommand"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PilotsDeck.UI.ActionDesignerUI.Views"
             xmlns:model="clr-namespace:PilotsDeck.UI.ActionDesignerUI.ViewModels"
             d:DataContext="{d:DesignInstance Type=model:ViewModelCommand}"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid Margin="8,0,8,0">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Style="{StaticResource DesignerLabelColumn}"/>
            <ColumnDefinition Style="{StaticResource DesignerControlColumn}"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Label Grid.Row="0" Grid.Column="0" Style="{StaticResource DesignerLabel}">
            Command Type:
        </Label>
        <ComboBox Grid.Row="0" Grid.Column="1" ItemsSource="{Binding CommandTypes}" SelectedValue="{Binding CommandType}" SelectedValuePath="Key" DisplayMemberPath="Value"
                  HorizontalAlignment="Left" MinWidth="144" Style="{StaticResource ComboboxDefault}"/>

        <ContentControl Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Name="VariableControl" Margin="0,8,0,0"/>

        <Label Grid.Row="3" Grid.Column="0" Visibility="{Binding IsBvar, Converter={StaticResource BoolVisibilityConverter}}" Style="{StaticResource DesignerLabelM8}">
            Run as Command:
        </Label>
        <CheckBox Grid.Row="3" Grid.Column="1" IsChecked="{Binding DoNotRequestBvar}" Visibility="{Binding IsBvar, Converter={StaticResource BoolVisibilityConverter}}"
                  Margin="0,8,0,0" HorizontalAlignment="Left" Style="{StaticResource CheckboxDefault}">
            Treat B-Var as Command Type (without readable Value)
        </CheckBox>

        <Label Grid.Row="4" Grid.Column="0" Visibility="{Binding CanXpCommandOnce, Converter={StaticResource BoolVisibilityConverter}}" Style="{StaticResource DesignerLabelM8}">
            Command Once:
        </Label>
        <CheckBox Grid.Row="4" Grid.Column="1" IsChecked="{Binding UseXpCommandOnce}" Visibility="{Binding CanXpCommandOnce, Converter={StaticResource BoolVisibilityConverter}}"
                  Margin="0,8,0,0" HorizontalAlignment="Left" Style="{StaticResource CheckboxDefault}">
            Press &amp; Release X-Plane Command in one Request
        </CheckBox>

        <Label Grid.Row="5" Grid.Column="0" Style="{StaticResource DesignerLabelM8}" Visibility="{Binding CanLongPress, Converter={StaticResource BoolVisibilityConverter}}">
            Long Press:
        </Label>
        <Grid Grid.Row="5" Grid.Column="1" Margin="0,8,0,0" Visibility="{Binding CanLongPress, Converter={StaticResource BoolVisibilityConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Label Grid.Column="0" MinWidth="212" Style="{StaticResource LabelDefaultLeft}">
                Trigger when Button was pressed for
            </Label>
            <TextBox Grid.Column="1" Name="InputTimeAfter" MinWidth="84" Style="{StaticResource InputCenteredLeft}"/>
            <Label Grid.Column="2" Style="{StaticResource LabelAnnotation}">ms</Label>
        </Grid>

        <Label Grid.Row="6" Grid.Column="0" Style="{StaticResource DesignerLabelM8}" Visibility="{Binding IsRotary, Converter={StaticResource BoolVisibilityConverter}}">
            Tick Delay:
        </Label>
        <Grid Grid.Row="6" Grid.Column="1" Margin="0,8,0,0" Visibility="{Binding IsRotary, Converter={StaticResource BoolVisibilityConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Label Grid.Column="0" MinWidth="212" Style="{StaticResource LabelDefaultLeft}">
                Wait after Tick before next Command
            </Label>
            <TextBox Grid.Column="1" Name="InputTickDelay" MinWidth="84" Style="{StaticResource InputCenteredLeft}"/>
            <Label Grid.Column="2" Style="{StaticResource LabelAnnotation}">ms</Label>
        </Grid>


        <Label Grid.Row="7" Grid.Column="0" Style="{StaticResource DesignerLabelM8}" Visibility="{Binding IsResettable, Converter={StaticResource BoolVisibilityConverter}}">
            Reset Switch:
        </Label>
        <Grid Grid.Row="7" Grid.Column="1" Margin="0,8,0,0" Visibility="{Binding IsResettable, Converter={StaticResource BoolVisibilityConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <CheckBox Grid.Column="0" IsChecked="{Binding ResetSwitch}" MinWidth="212" HorizontalAlignment="Left" Style="{StaticResource CheckboxDefault}">
                Reset Variable to Reset Value after:
            </CheckBox>
            <TextBox Grid.Column="1" Name="InputResetDelay" MinWidth="84" Style="{StaticResource InputCenteredLeft}"/>
            <Label Grid.Column="2" Style="{StaticResource LabelAnnotation}">ms</Label>
        </Grid>

        <Label Grid.Row="8" Grid.Column="0" Style="{StaticResource DesignerLabelM8}" Visibility="{Binding HasCommandDelay, Converter={StaticResource BoolVisibilityConverter}}">
            Command Delay:
        </Label>
        <Grid Grid.Row="8" Grid.Column="1" Margin="0,8,0,0" Visibility="{Binding HasCommandDelay, Converter={StaticResource BoolVisibilityConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <CheckBox Grid.Column="0" IsChecked="{Binding UseCommandDelay}" MinWidth="212" HorizontalAlignment="Left" Style="{StaticResource CheckboxDefault}">
                Use Delay between Commands of:
            </CheckBox>
            <TextBox Grid.Column="1" Name="InputCommandDelay" MinWidth="84" Style="{StaticResource InputCenteredLeft}"/>
            <Label Grid.Column="2" Style="{StaticResource LabelAnnotation}">ms</Label>
        </Grid>

        <Label Grid.Row="9" Grid.Column="0" Style="{StaticResource DesignerLabelM8}" Visibility="{Binding IsValueType, Converter={StaticResource BoolVisibilityConverter}}">
            On/Write Value:
        </Label>
        <TextBox Grid.Row="9" Grid.Column="1" Name="InputWriteValue" Visibility="{Binding IsValueType, Converter={StaticResource BoolVisibilityConverter}}"
                 Margin="0,8,0,0" MinWidth="212" HorizontalAlignment="Left" Style="{StaticResource InputLeft}"/>

        <Label Grid.Row="10" Grid.Column="0" Style="{StaticResource DesignerLabelM8}" Visibility="{Binding IsValueType, Converter={StaticResource BoolVisibilityConverter}}">
            Off/Reset Value:
        </Label>
        <TextBox Grid.Row="10" Grid.Column="1" Name="InputResetValue" Visibility="{Binding IsValueType, Converter={StaticResource BoolVisibilityConverter}}"
                 Margin="0,8,0,0" MinWidth="212" HorizontalAlignment="Left" Style="{StaticResource InputLeft}"/>

        <Label Grid.Row="11" Grid.Column="0" Style="{StaticResource DesignerLabelM8}">
            Any Condition:
        </Label>
        <CheckBox Grid.Row="11" Grid.Column="1" IsChecked="{Binding AnyCondition}" Margin="0,8,0,0" MinWidth="112" HorizontalAlignment="Left" Style="{StaticResource CheckboxDefault}">
            Trigger Command when any Condition is true (instead of all Conditions)
        </CheckBox>

        <Label Grid.Row="12" Grid.Column="0" Style="{StaticResource DesignerLabelM8}">
            Custom Name:
        </Label>
        <TextBox Grid.Row="12" Grid.Column="1" Name="InputName" Margin="0,8,0,0" MinWidth="212" HorizontalAlignment="Left" Style="{StaticResource InputLeft}"/>
    </Grid>
</UserControl>
